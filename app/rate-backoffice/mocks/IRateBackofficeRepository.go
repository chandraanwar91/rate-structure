// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import mock "github.com/stretchr/testify/mock"
import models "misteraladin.com/jasmine/rate-structure/models"

// IRateBackofficeRepository is an autogenerated mock type for the IRateBackofficeRepository type
type IRateBackofficeRepository struct {
	mock.Mock
}

// Fetch provides a mock function with given fields: page, perPage, ApplicableTo, bookingStart, bookingEnd, stayingStart, stayingEnd, status
func (_m *IRateBackofficeRepository) Fetch(page int, perPage int, ApplicableTo string, bookingStart string, bookingEnd string, stayingStart string, stayingEnd string, status string) ([]*models.RateBackoffice, int, error) {
	ret := _m.Called(page, perPage, ApplicableTo, bookingStart, bookingEnd, stayingStart, stayingEnd, status)

	var r0 []*models.RateBackoffice
	if rf, ok := ret.Get(0).(func(int, int, string, string, string, string, string, string) []*models.RateBackoffice); ok {
		r0 = rf(page, perPage, ApplicableTo, bookingStart, bookingEnd, stayingStart, stayingEnd, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.RateBackoffice)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int, int, string, string, string, string, string, string) int); ok {
		r1 = rf(page, perPage, ApplicableTo, bookingStart, bookingEnd, stayingStart, stayingEnd, status)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int, int, string, string, string, string, string, string) error); ok {
		r2 = rf(page, perPage, ApplicableTo, bookingStart, bookingEnd, stayingStart, stayingEnd, status)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetByDate provides a mock function with given fields: bookingStart, bookingEnd, stayingStart, stayingEnd, id
func (_m *IRateBackofficeRepository) GetByDate(bookingStart string, bookingEnd string, stayingStart string, stayingEnd string, id uint64) ([]models.RateBackoffice, error) {
	ret := _m.Called(bookingStart, bookingEnd, stayingStart, stayingEnd, id)

	var r0 []models.RateBackoffice
	if rf, ok := ret.Get(0).(func(string, string, string, string, uint64) []models.RateBackoffice); ok {
		r0 = rf(bookingStart, bookingEnd, stayingStart, stayingEnd, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.RateBackoffice)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, uint64) error); ok {
		r1 = rf(bookingStart, bookingEnd, stayingStart, stayingEnd, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *IRateBackofficeRepository) GetById(id uint64) (*models.RateBackoffice, error) {
	ret := _m.Called(id)

	var r0 *models.RateBackoffice
	if rf, ok := ret.Get(0).(func(uint64) *models.RateBackoffice); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.RateBackoffice)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: m
func (_m *IRateBackofficeRepository) Store(m *models.RateBackoffice) (*models.RateBackoffice, error) {
	ret := _m.Called(m)

	var r0 *models.RateBackoffice
	if rf, ok := ret.Get(0).(func(*models.RateBackoffice) *models.RateBackoffice); ok {
		r0 = rf(m)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.RateBackoffice)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.RateBackoffice) error); ok {
		r1 = rf(m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Test provides a mock function with given fields: name
func (_m *IRateBackofficeRepository) Test(name string) string {
	ret := _m.Called(name)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Update provides a mock function with given fields: data, m
func (_m *IRateBackofficeRepository) Update(data *models.RateBackoffice, m *models.RateBackoffice) (*models.RateBackoffice, error) {
	ret := _m.Called(data, m)

	var r0 *models.RateBackoffice
	if rf, ok := ret.Get(0).(func(*models.RateBackoffice, *models.RateBackoffice) *models.RateBackoffice); ok {
		r0 = rf(data, m)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.RateBackoffice)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.RateBackoffice, *models.RateBackoffice) error); ok {
		r1 = rf(data, m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
