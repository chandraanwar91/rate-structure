// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import mock "github.com/stretchr/testify/mock"
import models "misteraladin.com/jasmine/rate-structure/models"

// IRateExtranetRepository is an autogenerated mock type for the IRateExtranetRepository type
type IRateExtranetRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: data, ModifiedBy
func (_m *IRateExtranetRepository) Delete(data *models.RateExtranet, ModifiedBy int) error {
	ret := _m.Called(data, ModifiedBy)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.RateExtranet, int) error); ok {
		r0 = rf(data, ModifiedBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fetch provides a mock function with given fields: page, perPage, ApplicableTo, bookingStart, bookingEnd, travelStart, travelEnd, status, hotelID, roomID, discountType
func (_m *IRateExtranetRepository) Fetch(page int, perPage int, ApplicableTo string, bookingStart string, bookingEnd string, travelStart string, travelEnd string, status string, hotelID string, roomID string, discountType string) ([]*models.RateExtranet, int, error) {
	ret := _m.Called(page, perPage, ApplicableTo, bookingStart, bookingEnd, travelStart, travelEnd, status, hotelID, roomID, discountType)

	var r0 []*models.RateExtranet
	if rf, ok := ret.Get(0).(func(int, int, string, string, string, string, string, string, string, string, string) []*models.RateExtranet); ok {
		r0 = rf(page, perPage, ApplicableTo, bookingStart, bookingEnd, travelStart, travelEnd, status, hotelID, roomID, discountType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.RateExtranet)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int, int, string, string, string, string, string, string, string, string, string) int); ok {
		r1 = rf(page, perPage, ApplicableTo, bookingStart, bookingEnd, travelStart, travelEnd, status, hotelID, roomID, discountType)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int, int, string, string, string, string, string, string, string, string, string) error); ok {
		r2 = rf(page, perPage, ApplicableTo, bookingStart, bookingEnd, travelStart, travelEnd, status, hotelID, roomID, discountType)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetByDate provides a mock function with given fields: rateParam, id
func (_m *IRateExtranetRepository) GetByDate(rateParam *models.RateExtranet, id uint64) ([]models.RateExtranet, error) {
	ret := _m.Called(rateParam, id)

	var r0 []models.RateExtranet
	if rf, ok := ret.Get(0).(func(*models.RateExtranet, uint64) []models.RateExtranet); ok {
		r0 = rf(rateParam, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.RateExtranet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.RateExtranet, uint64) error); ok {
		r1 = rf(rateParam, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *IRateExtranetRepository) GetById(id uint64) (*models.RateExtranet, error) {
	ret := _m.Called(id)

	var r0 *models.RateExtranet
	if rf, ok := ret.Get(0).(func(uint64) *models.RateExtranet); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.RateExtranet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: m
func (_m *IRateExtranetRepository) Store(m *models.RateExtranet) (*models.RateExtranet, error) {
	ret := _m.Called(m)

	var r0 *models.RateExtranet
	if rf, ok := ret.Get(0).(func(*models.RateExtranet) *models.RateExtranet); ok {
		r0 = rf(m)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.RateExtranet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.RateExtranet) error); ok {
		r1 = rf(m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: data, m
func (_m *IRateExtranetRepository) Update(data *models.RateExtranet, m *models.RateExtranet) (*models.RateExtranet, error) {
	ret := _m.Called(data, m)

	var r0 *models.RateExtranet
	if rf, ok := ret.Get(0).(func(*models.RateExtranet, *models.RateExtranet) *models.RateExtranet); ok {
		r0 = rf(data, m)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.RateExtranet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.RateExtranet, *models.RateExtranet) error); ok {
		r1 = rf(data, m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
